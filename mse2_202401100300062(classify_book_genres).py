# -*- coding: utf-8 -*-
"""MSE2_202401100300062(Classify_Book_Genres).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RJZCSl4km7_ZpR_dMEYGKCxUzoM_LNec
"""

!pip install pandas scikit-learn seaborn matplotlib

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

from google.colab import files

df = pd.read_csv("/content/book_genres.csv")
df.head()

df.info()
df.isnull().sum()

df.dropna(inplace=True)
df.rename(columns={"AuthorName": "author", "PageCount": "length", "Tags": "keywords", "Genre": "genre"}, inplace=True)

df.head()

print(df.columns)

le = LabelEncoder()
df['genre_encoded'] = le.fit_transform(df['genre'])
df[['genre', 'genre_encoded']].drop_duplicates()

df['text_data'] = df['author_popularity'].astype(str) + ' ' + df['book_length'].astype(str) + ' ' + df['num_keywords'].astype(str)
df[['text_data']].head()

vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df['text_data'])

y = df['genre_encoded']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("Classification Report:\n", classification_report(y_test, y_pred, target_names=le.classes_))

# Confusion matrix heatmap
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', xticklabels=le.classes_, yticklabels=le.classes_)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()